########################################################################################################################
# Office                                                                                                               #
########################################################################################################################
################################################################################
# Motion                                                                       #
################################################################################

- alias: Office Exit
  id: office_no_motion
  trigger:
    - platform: state
      entity_id: binary_sensor.office_motion
      to: "off"
      for: "00:03:00"
  condition:
    - condition: state
      entity_id: binary_sensor.joris_at_computer
      state: "off"
  action:
    - service: scene.turn_on
      data:
        entity_id: "scene.OfficeExit"

- alias: Office Motion Sleeping
  id: office_motion_sleeping
  trigger:
    - platform: state
      entity_id: binary_sensor.office_motion
      to: "on"
    - platform: state
      entity_id: binary_sensor.office_motion
      to: "off"
      for: "00:03:00"
  condition:
    - condition: state
      entity_id: input_select.house_mode
      state: "Sleeping"
  variables:
    scene_entity_id: "{{ 'scene.OfficeSleeping' if (trigger.to_state.state == 'on') else 'scene.OfficeSleepingExit' }}"
  action:
    - service: scene.turn_on
      data:
        entity_id: "{{ scene_entity_id }}"

################################################################################
# House Mode                                                                   #
################################################################################

- alias: Office House Mode
  id: office_house_mode
  description: "Set Office scene based on House Mode"
  trigger:
    - platform: state
      entity_id: input_select.house_mode
    - platform: state
      entity_id: light.office
      to: "on"
  condition:
    - condition: state
      entity_id: light.office
      state: "on"
  action:
    - service: scene.turn_on
      data:
        entity_id: "scene.Office{{ states('input_select.house_mode')}}"

- alias: Turn off Office Desk light when turning off office light
  id: office_desk_lamp
  trigger:
    - platform: state
      entity_id: light.office
      to: "off"
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.desk_lamp

- alias: Turn on Office light when turning on office desk light
  id: office_light
  trigger:
    - platform: state
      entity_id: switch.desk_lamp
      to: "on"
  action:
    - service: light.turn_on
      data:
        entity_id: light.office

################################################################################
# Office Curtains                                                              #
################################################################################
# Open curtains at 9AM when awake, or whenever we get up after 9AM
- alias: Open office curtains
  id: office_curtains_open
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_select.house_mode
      to: "Morning"
    - platform: time
      at: "09:00:00"
  condition:
    - condition: time
      after: "08:59:00"
    - condition: state
      entity_id: input_select.house_mode
      state: "Morning"
  action:
    - service: cover.open_cover
      data:
        entity_id: cover.office_curtain_right
    - service: cover.open_cover
      target:
        entity_id: cover.office_blinds
    - condition: state
      entity_id: binary_sensor.joris_at_computer
      state: "off"
    - service: cover.open_cover
      data:
        entity_id: cover.office_curtain_left

- alias: Close Office curtains
  id: office_curtains_close
  trigger:
    - platform: sun
      event: sunset
      offset: "01:00:00"
  action:
    - service: cover.close_cover
      data:
        entity_id: cover.office_curtains

# Office Curtain - Quick buttons
- alias: Office Curtain Quick button
  id: office_curtain_left_quick_button
  trigger:
    - platform: event
      event_type: zha_event
      event_data:
        device_ieee: "00:0d:6f:00:0f:d6:e2:b4"
    - platform: event
      event_type: zha_event
      event_data:
        device_ieee: "00:0d:6f:00:10:9c:73:89"
  variables:
    curtain_entity_id: |
      {% if trigger.event.data.device_ieee == "00:0d:6f:00:0f:d6:e2:b4" %}
        cover.office_curtain_left
      {% elif trigger.event.data.device_ieee == "00:0d:6f:00:10:9c:73:89" %}
        cover.office_curtain_right
      {% endif %}
  action:
    - choose:
        - alias: "Close Curtain"
          conditions: "{{ trigger.event.data.command == 'on' }}"
          sequence:
            - service: cover.close_cover
              data:
                entity_id: "{{ curtain_entity_id }}"
        - alias: "Close Curtain"
          conditions: "{{ trigger.event.data.command == 'off' }}"
          sequence:
            - service: cover.open_cover
              data:
                entity_id: "{{ curtain_entity_id }}"
        - alias: "Stop Curtain"
          conditions: "{{ trigger.event.data.command == 'move_to_color_temp' }}"
          sequence:
            - service: cover.stop_cover
              data:
                entity_id: "{{ curtain_entity_id }}"

################################################################################
# Office Computer                                                              #
################################################################################

- alias: Set Computer Scene according to binary sensor
  id: office_computer_scene
  trigger:
    platform: state
    entity_id: binary_sensor.joris_at_computer
  action:
    - service: scene.turn_on
      data:
        entity_id: "{{ 'scene.OfficeComputerOn' if is_state('binary_sensor.joris_at_computer', 'on') else 'scene.OfficeComputerOff'}}"

    # When leaving computer and other curtain is open, open the one behind the computer as well
    - condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.joris_at_computer
          state: "off"
        - condition: state
          entity_id: cover.office_curtain_right
          state: "open"
    - service: cover.open_cover
      data:
        entity_id: cover.office_curtain_left

################################################################################
# Office Light Switch                                                          #
################################################################################

- alias: Turn On/Off Office lights when toggling switch
  id: office_light_switch
  trigger:
    - platform: event
      event_type: zha_event
      event_data:
        device_ieee: "00:15:8d:00:07:6c:4b:a7"
        command: "single"
  action:
    - service: light.toggle
      data:
        entity_id: light.office

################################################################################
# Office CO2                                                                   #
################################################################################

- alias: Notify Joris when CO2 too high
  id: office_co2_high
  trigger:
    - platform: numeric_state
      entity_id: sensor.office_waveplus_co2
      above: 800
    - platform: numeric_state
      entity_id: sensor.office_waveplus_co2
      above: 1000
    - platform: numeric_state
      entity_id: sensor.office_waveplus_co2
      above: 1200
  action:
    - service: script.notify_joris
      data:
        message: Office CO2 concentration ({{ states('sensor.office_waveplus_co2') }}) getting high!
        expire: "00:15:00"
