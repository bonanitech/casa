########################################################################################################################
# House Mode                                                                                                           #
########################################################################################################################

- alias: Set scene for House Mode
  id: house_mode_scene
  mode: restart
  trigger:
    platform: state
    entity_id: input_select.house_mode
  action:
    - service: scene.turn_on
      data:
        entity_id: "scene.{{ states('input_select.house_mode') | lower | replace(' ', '_')}}"
    # - delay: 00:00:25 # Wait a bit, then try again, in case there was a light that didn't turn off
    - service: scene.turn_on
      data:
        entity_id: "scene.{{ states('input_select.house_mode') | lower | replace(' ', '_')}}"

- alias: Auto-determine house mode when set to 'Auto'
  id: house_mode_autodetermine_from_auto
  trigger:
    - platform: state
      entity_id: input_select.house_mode
      to: "Auto"
    - platform: state
      entity_id: sensor.target_house_mode
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: input_select.house_mode
          state:
            - Sleeping
            - Away
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "{{ states('sensor.target_house_mode') }}"

# Ensure house is always in the correct state
- alias: Rerun house mode scene every 15 min
  id: rerun_house_mode
  trigger:
    - platform: time_pattern
      minutes: "/15"
  action:
    - service: scene.turn_on
      data:
        entity_id: "scene.{{ states('input_select.house_mode') | lower | replace(' ', '_')}}"

- alias: Set house_mode to home when turning on the office light in the morning
  id: house_mode_auto_home_on_start_work
  trigger:
    - platform: state
      entity_id: binary_sensor.joris_working
      to: "on"
    - platform: state
      entity_id: light.office
      to: "on"
  condition:
    - condition: state
      entity_id: input_select.house_mode
      state: "Sleeping"
    - condition: time
      after: "05:00:00"
      before: "18:00:00"
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "Auto"

- alias: Ask for action on leaving home
  id: house_mode_ask_leaving_home
  trigger:
    platform: state
    entity_id: input_select.house_mode
    to: Away
  action:
    - alias: "Set up variables for the actions"
      variables:
        action_open: "{{ 'OPEN_' ~ context.id }}"
        action_close: "{{ 'CLOSE_' ~ context.id }}"
    - service: notify.notify
      data:
        message: Home set to Away. Close Curtains?
        data:
          tag: house-mode-leave-ask
          actions:
            - action: "{{ action_open }}"
              title: Open
            - action: "{{ action_close }}"
              title: Close
    - alias: "Wait for a response"
      wait_for_trigger:
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: "{{ action_open }}"
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: "{{ action_close }}"
      timeout: "00:02:00"
    - alias: "Perform the action"
      choose:
        - conditions: "{{ wait.trigger.event.data.action == action_open }}"
          sequence:
            - service: cover.open_cover
              target:
                entity_id: cover.office_curtains
        - conditions: "{{ wait.trigger.event.data.action == action_close }}"
          sequence:
            - service: cover.close_cover
              target:
                entity_id: cover.office_curtains
      default:
        - service: notify.notify
          data:
            message: clear_notification
            data:
              tag: house-mode-leave-ask

- alias: Trigger Midnight Scene
  id: house_mode_midnight
  trigger:
    - platform: time
      at: "00:00:00"
  action:
    - service: scene.turn_on
      data:
        entity_id: scene.Midnight
    - condition: not
      conditions:
        - condition: state
          entity_id: input_select.house_mode
          state: "Sleeping"
    - service: script.notify_joris
      data:
        message: Midnight. Turning off outdoor lights.
        expire: "00:15:00"

- alias: Set house_mode to Auto when joris coming home
  id: house_mode_auto_coming_home
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door_contact
      to: "on"
  condition:
    - condition: state
      entity_id: input_select.house_mode
      state: "Away"
      for: "00:05:00"
    - condition: state
      entity_id: person.joris
      state: "home"
  action:
    - service: script.notify_joris
      data:
        title: Welcome Home
        message: Joris coming home detected! Setting House Mode to Home
        expire: "00:15:00"
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "Auto"

################################################################################
# Housekeeping                                                                 #
################################################################################

- alias: Disable certain automations during housekeeping
  id: housekeeping_disable_automations
  trigger:
    - platform: state
      entity_id: binary_sensor.housekeeping
  action:
    - if: "{{ trigger.to_state.state == 'on' }}"
      then:
        - service: automation.turn_off
          data:
            entity_id: group.automation_disable_housekeeping
      else:
        - service: automation.turn_on
          data:
            entity_id: group.automation_disable_housekeeping

- alias: Auto enable Joris PTO based on calendar
  id: joris_pto_auto_enable
  mode: single
  trigger:
    - platform: time_pattern
      hours: "/1"
    - platform: state
      entity_id: calendar.family
      to: "on"
  action:
    - if:
        - condition: template
          value_template: "{{ 'Joris PTO' in state_attr('calendar.family', 'message') }}"
        # ensure the PTO is today and not in the future before setting the input_boolean
        - condition: template
          value_template: "{{ state_attr('calendar.family', 'start_time') | as_datetime | as_local < now() }}"
        - condition: template
          value_template: "{{ state_attr('calendar.family', 'end_time') | as_datetime | as_local > now() }}"
      then:
        - service: input_boolean.turn_on
          data:
            entity_id: input_boolean.joris_pto
      else:
        - service: input_boolean.turn_off
          data:
            entity_id: input_boolean.joris_pto
