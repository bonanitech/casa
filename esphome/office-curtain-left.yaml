substitutions:
  dnsname: office-curtain-left # don't use underscores, not liked by certain DNS/DHCP systems
  deviceid: office_curtain_left
  devicename: Office Curtain Left
  duration: 7s # Time it takes to completely open or close a window

esphome:
  name: ${dnsname}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${dnsname}_fallback-AP
    password: !secret wifi_fallback_ap_password

api:
  password: !secret api_password
  encryption: 
    key: !secret api_encryption_key

logger:

ota:
  password: !secret ota_password

switch:
  - platform: gpio
    id: ${deviceid}_relay_1
    name: ${devicename} Relay1
    pin: GPIO15
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - delay: ${duration}
        - switch.turn_off: ${deviceid}_relay_1
  - platform: gpio
    id: ${deviceid}_relay_2
    name: ${devicename} Relay2
    pin: GPIO4
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - delay: ${duration}
        - switch.turn_off: ${deviceid}_relay_2
    
# This exposes the Switching inputs as binary_sensors
# It also ties the binary sensors to the relays: switching the relays on and off with the buttons
# Note that this isn't default behavior, you have to program this yourself!
binary_sensor:
  - platform: gpio
    id: ${deviceid}_switch_1
    name: ${devicename} Switch1
    pin:
      number: GPIO13
    on_press:
      then:
        - switch.turn_on: ${deviceid}_relay_1
    on_release:
      then:
        - switch.turn_off: ${deviceid}_relay_1
  - platform: gpio
    id: ${deviceid}_switch_2
    name: ${devicename} Switch2
    pin:
      number: GPIO5
    on_press:
      then:
        - switch.turn_on: ${deviceid}_relay_2
    on_release:
      then:
        - switch.turn_off: ${deviceid}_relay_2