homeassistant:
{% for key, value in homeassistant_general_config.items() %}
  {{key}}: {{value}}
{% endfor %}
  auth_providers:
    - type: homeassistant
    - type: trusted_networks
      allow_bypass_login: true
      trusted_networks:
{% for network in homeassistant_http.trusted_networks %}
        - {{network}}
{% endfor %}

# Discover some devices automatically
# discovery:

system_health:

logger:
  default: info
  logs:
    homeassistant.components.device_tracker: error
    homeassistant.components.device_tracker.nmap_tracker: error
    # homeassistant.components.device_tracker.ping: warn
    # homeassistant.components.http: warn
    # homeassistant.components.automation: debug

# View all events in a logbook
logbook:

# Enables the frontend
frontend:

# The 'history' component is the history tab in the homeassitant UI. This tends to be very slow. We use
# prometheus+grafana instead for historic data, so we can disable this.
# history:

prometheus:
  namespace: homeassistant

notify:
  # Hass only works with legacy slack tokens
  # https://api.slack.com/custom-integrations/legacy-tokens
  # Slack's advantage over pushbullet is the ability to format messages and more customizable notification preferences
  # Note that username needs to be set to a different user than the one logged in to a device (e.g. phone)
  # for notifications to show up (messages from one-self do not generate notifications)
  # If username is not specified below, then messages will come from one-self (and hence no notifications)
  - name: slack
    platform: slack
    api_key: "{{slack_api_key}}"
    default_channel: "{{slack_default_channel}}"
    username: "{{slack_username}}"

# Allows you to issue voice commands from the frontend
conversation:

device_tracker:
  - platform: nmap_tracker
    hosts: {{nmap_tracker_hosts}}
    track_new_devices: no
    consider_home: 1200
    interval_seconds: 5
    exclude:
{% for excluded_target in nmap_exclude %}
      - {{excluded_target}}
{% endfor %}
    # Newline required here so ansible doesn't mess up the indentation after 'endfor'
  - platform: ping
    track_new_devices: yes
    count: 3
    interval_seconds: 5
    consider_home: 7
    hosts:
{% for key, value in device_tracker_ping.items() %}
      {{key}}: {{value}}
{% endfor %}

# Track the sun
sun:

# Enable iOS support
# ios:

media_player:
  - platform: samsungtv
    host: {{samsungtv_host}}
    port: 8001
    name: tv_bedroom
  - platform: samsungtv
    host: {{tv_livingroom_host}}
    port: 8001
    name: tv_livingroom

# There's issues with AppleTV that cause the TV to turn on randomly. Disabling it for now.
# - https://community.home-assistant.io/t/apple-tv-apple-tv-failed-to-login/11694/53
# - https://github.com/home-assistant/home-assistant/issues/6777
# apple_tv:
#   - name: Apple TV
#     host: {{atv_host}}
#     login_id: {{atv_login_id}}
#     start_off: false
#    credentials: CREDENTIALS

hue:
  bridges:
    - host: {{phue_ip}}
      filename: phue.conf
      allow_unreachable: true
      allow_hue_groups: true


tradfri:
  host: {{tradfri_ip}}
  # allow_tradfri_groups: true # Doesn't seem to work anymore?, use light groups below

homematic:
  interfaces:
    rf:
      host: "{{homematic_controller_ip}}"
      resolvenames: json
      username: "{{homematic_controller_username}}"
      password: "{{homematic_controller_password}}"
  hosts:
    ccu2:
      host: "{{homematic_controller_ip}}"
      username: "{{homematic_controller_username}}"
      password: "{{homematic_controller_password}}"

# Creating own groups so we can control all lights at once, working around
# this and other issues:
# https://github.com/home-assistant/home-assistant/issues/9801
light:
  - platform: group
    name: bathroom_group
    entities:
      - light.bathroom_left_back
      - light.bathroom_left_front
      - light.bathroom_right_back
      - light.bathroom_right_front
      - light.bathroom_shower
  - platform: group
    name: Office
    entities:
      - light.office_lamp_1
      - light.office_lamp_2
      - light.office_lamp_3
  - platform: group
    name: Dining Table
    entities:
      - light.eetkamer_lamp_1
      - light.eetkamer_lamp_2
      - light.eetkamer_lamp_3
  - platform: group
    name: Hallway
    entities:
      - light.hal_lamp_1
      - light.hal_lamp_2
      - light.hal_lamp_3

panel_iframe:
  roofcam:
    title: 'roofcam'
    url: 'http://{{casa_ip}}:{{roofcam_port}}'
    icon: 'mdi:camcorder'

sensor:
    - platform: systemmonitor
      resources:
         - type: memory_free
         - type: disk_use_percent
           arg: /
         - type: memory_use_percent
         - type: load_1m
         - type: load_5m
         - type: load_15m
         - type: processor_use
    - platform: buienradar
      monitored_conditions:
        - symbol
        - conditiondetailed
        - humidity
        - temperature
        - windspeed
        - pressure
{% for account in postnl_accounts %}
    - platform: postnl
      username: "{{ account['username'] }}"
      password: "{{ account.password }}"
      name: "{{ account.name }}"
{% endfor %}
    - platform: dsmr
      host: "{{groups["energy_tracker"][0]}}"
      port: "{{ser2net_public_port}}"
      dsmr_version: 4
    - platform: google_travel_time
      api_key: {{google_travel_time_api_key}}
      origin: {{google_travel_time_origin}}
      destination: {{google_travel_time_destination}}
      name: {{google_travel_time_name}}
    - platform: time_date
      display_options:
        - "time"
        - "date"
        - "date_time"
    - platform: command_line
      name: "prom2hass"
      command: python /config/prom2hass.py
      scan_interval: 20
      # Let's set the sensor to always be 1, otherwise hass will try to capture the much more verbose output
      # of prom2hass which it doesn't allow since sensor states can only be 255 characters.
      value_template: "1"
    - platform: template
      sensors:
        desk_state:
          friendly_name: "Desk"
          {% raw %}
          value_template: >-
            {% if states('sensor.deskheight')|float  < 75 %}
              down
            {% else %}
              up
            {% endif %}
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        br_symbol_highres:
          friendly_name: "br Symbol highres"
          {% raw %}
          value_template: "{{ states('sensor.br_symbol') }}"
          entity_picture_template: "{{ states.sensor.br_symbol.attributes.entity_picture | replace('30x30', '300x300') }}"
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        afvalwijzer_details:
          friendly_name: "afvalwijzer details"
          {% raw %}
          value_template: >-
            <div><span class="gft">GFT</span><span>{{ state_attr("sensor.afvalwijzer_next_pickup_gft", "pickup_date") }}</span></div>
            <div><span class="plastic">PLASTIC</span><span>{{ state_attr("sensor.afvalwijzer_next_pickup_plastic", "pickup_date") }}</span></div>
            <div><span class="paper">PAPER</span><span>{{ state_attr("sensor.afvalwijzer_next_pickup_papier", "pickup_date") }}</span></div>
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        postnl_enroute:
          friendly_name: "postnl enroute"
          {% raw %}
          value_template: >-
            {% set ns = namespace(shipments=0) %}
            {% for shipment in state_attr('sensor.postnl_joris', 'shipments') + state_attr('sensor.postnl_ilse', 'shipments') %}
              {% if not shipment['status']['isDelivered'] %}
               {% set ns.shipments=ns.shipments+1 %}
              {% endif %}
            {% endfor %}
            {{ ns.shipments }}
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        postnl_details:
          friendly_name: "PostNL Shipment Details"
          {% raw %}
          value_template: >-
            {% if states("sensor.postnl_joris") | int + states("sensor.postnl_ilse") | int > 0 %}
              <ol>
              {%- for shipment in state_attr('sensor.postnl_joris', 'shipments') %}
                {%- if not shipment['status']['isDelivered'] %}
                <li>[Joris] {{ as_timestamp(shipment['status']['enroute']['timeframe']['from']) | timestamp_custom('%a %d %b %Y, %H:%M-')}}{{ as_timestamp(shipment['status']['enroute']['timeframe']['to']) | timestamp_custom('%H:%M')}} {{ shipment['title'] }}</li>
                {%- endif %}
              {%- endfor %}
              {%- for shipment in state_attr('sensor.postnl_ilse', 'shipments') %}
                {%- if not shipment['status']['isDelivered'] %}
                <li>[Ilse] {{ as_timestamp(shipment['status']['enroute']['timeframe']['from']) | timestamp_custom('%a %d %b %Y, %H:%M-')}}{{ as_timestamp(shipment['status']['enroute']['timeframe']['to']) | timestamp_custom('%H:%M')}} {{ shipment['title'] }}</li>
                {%- endif %}
              {%- endfor %}
              </ol>
            {% else %}
            No packages en route
            {% endif %}
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        weekday:
          friendly_name: "Weekday"
          value_template: "{% raw %}{{ as_timestamp(now()) | timestamp_custom('%A') }}{% endraw %}"

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'

binary_sensor: !include sensors/binary.yaml

nest:
    client_id: {{nest_client_id}}
    client_secret: {{nest_client_secret}}

emulated_hue:
  host_ip: "{{casa_ip}}"
  advertise_ip: "{{casa_ip}}"
  listen_port: 80
  expose_by_default: false
  entities:
    # Lights
    light.kitchen:
      name: "Kitchen"
      hidden: false
    light.office:
      name: "Office"
      hidden: false
    light.living_room:
      name: "Living Room"
      hidden: false
    light.dining_table:
      name: "Dinner Table"
      hidden: false
    light.woonkamer_tv:
      name: "TV lights"
      hidden: false
    # Scripts
    script.turn_off_tv:
      name: "Turn Off TV"
      hidden: false
    script.goodnight:
      name: "Good Night"
      hidden: false
    script.leave:
      name: "Leave"
      hidden: false
    # Scenes
    scene.breakfast:
      name: "Breakfast"
      hidden: false
    scene.dinner:
      name: "Dinner"
      hidden: false

tts:
  - platform: amazon_polly
    aws_access_key_id: "{{aws_polly_access_key_id}}"
    aws_secret_access_key: "{{aws_polly_secret_access_key}}"

zwave:
  usb_path: "{{zwave_gateway_device_container}}"

{#
  1. Use %raw to insert braces into the lines below without ansible replacing them.
  2. FYI that in shell_command can't combine variables with actual shells (so using >> and | won't work)
     This is to ensure we're not just executing arbitrary shell commands based on user input.
     See https://github.com/home-assistant/home-assistant/blob/3ee4d1060fdbe067c19f7d4ce4777a7eb9dbb412/
     homeassistant/components/shell_command.py#L59-L65
#}

shell_command:
    play_sonos_favorite: 'curl "{{sonos_http_api_url_base}}/{% raw %}{{room}}/favorite/{{favorite}}{% endraw %}"'
    play_sonos_preset: 'curl "{{sonos_http_api_url_base}}/preset/{% raw %}{{preset}}{% endraw %}"'
    restart_sonos: '/usr/bin/sudo /bin/systemctl restart {{sonos_http_api_service}}'
    samsungtv_send_key: '/usr/bin/samtvcli --server {{samsungtv_host}} --session-id 1 --session-key {{samsungtv_session_key}} key {% raw %}{{key}}{% endraw %}'

rest_command:
  start_morning_tv:
    url: "http://{{groups["tv_controller"][0]}}:8000/show_url?url=http://{{casa_ip}}:{{appdaemon_port}}/TV_Morning?skin=casa"
    method: GET
    username: "{{tv_api_username}}"
    password: "{{tv_api_password}}"

input_select: !include inputs/select.yaml

input_boolean: !include inputs/boolean.yaml

# Enable config editor
config:

script: !include scripts.yaml

group: !include groups.yaml

scene: !include_dir_merge_list scenes/

automation: !include_dir_merge_list automations/
